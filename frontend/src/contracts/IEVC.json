{"abi":[{"type":"function","name":"areChecksDeferred","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"areChecksInProgress","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"batch","inputs":[{"name":"items","type":"tuple[]","internalType":"struct IEVC.BatchItem[]","components":[{"name":"targetContract","type":"address","internalType":"address"},{"name":"onBehalfOfAccount","type":"address","internalType":"address"},{"name":"value","type":"uint256","internalType":"uint256"},{"name":"data","type":"bytes","internalType":"bytes"}]}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"batchRevert","inputs":[{"name":"items","type":"tuple[]","internalType":"struct IEVC.BatchItem[]","components":[{"name":"targetContract","type":"address","internalType":"address"},{"name":"onBehalfOfAccount","type":"address","internalType":"address"},{"name":"value","type":"uint256","internalType":"uint256"},{"name":"data","type":"bytes","internalType":"bytes"}]}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"batchSimulation","inputs":[{"name":"items","type":"tuple[]","internalType":"struct IEVC.BatchItem[]","components":[{"name":"targetContract","type":"address","internalType":"address"},{"name":"onBehalfOfAccount","type":"address","internalType":"address"},{"name":"value","type":"uint256","internalType":"uint256"},{"name":"data","type":"bytes","internalType":"bytes"}]}],"outputs":[{"name":"batchItemsResult","type":"tuple[]","internalType":"struct IEVC.BatchItemResult[]","components":[{"name":"success","type":"bool","internalType":"bool"},{"name":"result","type":"bytes","internalType":"bytes"}]},{"name":"accountsStatusCheckResult","type":"tuple[]","internalType":"struct IEVC.StatusCheckResult[]","components":[{"name":"checkedAddress","type":"address","internalType":"address"},{"name":"isValid","type":"bool","internalType":"bool"},{"name":"result","type":"bytes","internalType":"bytes"}]},{"name":"vaultsStatusCheckResult","type":"tuple[]","internalType":"struct IEVC.StatusCheckResult[]","components":[{"name":"checkedAddress","type":"address","internalType":"address"},{"name":"isValid","type":"bool","internalType":"bool"},{"name":"result","type":"bytes","internalType":"bytes"}]}],"stateMutability":"payable"},{"type":"function","name":"call","inputs":[{"name":"targetContract","type":"address","internalType":"address"},{"name":"onBehalfOfAccount","type":"address","internalType":"address"},{"name":"value","type":"uint256","internalType":"uint256"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"result","type":"bytes","internalType":"bytes"}],"stateMutability":"payable"},{"type":"function","name":"controlCollateral","inputs":[{"name":"targetCollateral","type":"address","internalType":"address"},{"name":"onBehalfOfAccount","type":"address","internalType":"address"},{"name":"value","type":"uint256","internalType":"uint256"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"result","type":"bytes","internalType":"bytes"}],"stateMutability":"payable"},{"type":"function","name":"disableCollateral","inputs":[{"name":"account","type":"address","internalType":"address"},{"name":"vault","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"disableController","inputs":[{"name":"account","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"enableCollateral","inputs":[{"name":"account","type":"address","internalType":"address"},{"name":"vault","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"enableController","inputs":[{"name":"account","type":"address","internalType":"address"},{"name":"vault","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"forgiveAccountStatusCheck","inputs":[{"name":"account","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"forgiveVaultStatusCheck","inputs":[],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"getAccountOwner","inputs":[{"name":"account","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"getAddressPrefix","inputs":[{"name":"account","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bytes19","internalType":"bytes19"}],"stateMutability":"pure"},{"type":"function","name":"getCollaterals","inputs":[{"name":"account","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"getControllers","inputs":[{"name":"account","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"getCurrentOnBehalfOfAccount","inputs":[{"name":"controllerToCheck","type":"address","internalType":"address"}],"outputs":[{"name":"onBehalfOfAccount","type":"address","internalType":"address"},{"name":"controllerEnabled","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"getLastAccountStatusCheckTimestamp","inputs":[{"name":"account","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getNonce","inputs":[{"name":"addressPrefix","type":"bytes19","internalType":"bytes19"},{"name":"nonceNamespace","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"nonce","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getOperator","inputs":[{"name":"addressPrefix","type":"bytes19","internalType":"bytes19"},{"name":"operator","type":"address","internalType":"address"}],"outputs":[{"name":"operatorBitField","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getRawExecutionContext","inputs":[],"outputs":[{"name":"context","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"haveCommonOwner","inputs":[{"name":"account","type":"address","internalType":"address"},{"name":"otherAccount","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"pure"},{"type":"function","name":"isAccountOperatorAuthorized","inputs":[{"name":"account","type":"address","internalType":"address"},{"name":"operator","type":"address","internalType":"address"}],"outputs":[{"name":"authorized","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isAccountStatusCheckDeferred","inputs":[{"name":"account","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isCollateralEnabled","inputs":[{"name":"account","type":"address","internalType":"address"},{"name":"vault","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isControlCollateralInProgress","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isControllerEnabled","inputs":[{"name":"account","type":"address","internalType":"address"},{"name":"vault","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isLockdownMode","inputs":[{"name":"addressPrefix","type":"bytes19","internalType":"bytes19"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isOperatorAuthenticated","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isPermitDisabledMode","inputs":[{"name":"addressPrefix","type":"bytes19","internalType":"bytes19"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isSimulationInProgress","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isVaultStatusCheckDeferred","inputs":[{"name":"vault","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"permit","inputs":[{"name":"signer","type":"address","internalType":"address"},{"name":"sender","type":"address","internalType":"address"},{"name":"nonceNamespace","type":"uint256","internalType":"uint256"},{"name":"nonce","type":"uint256","internalType":"uint256"},{"name":"deadline","type":"uint256","internalType":"uint256"},{"name":"value","type":"uint256","internalType":"uint256"},{"name":"data","type":"bytes","internalType":"bytes"},{"name":"signature","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"reorderCollaterals","inputs":[{"name":"account","type":"address","internalType":"address"},{"name":"index1","type":"uint8","internalType":"uint8"},{"name":"index2","type":"uint8","internalType":"uint8"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"requireAccountAndVaultStatusCheck","inputs":[{"name":"account","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"requireAccountStatusCheck","inputs":[{"name":"account","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"requireVaultStatusCheck","inputs":[],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"setAccountOperator","inputs":[{"name":"account","type":"address","internalType":"address"},{"name":"operator","type":"address","internalType":"address"},{"name":"authorized","type":"bool","internalType":"bool"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"setLockdownMode","inputs":[{"name":"addressPrefix","type":"bytes19","internalType":"bytes19"},{"name":"enabled","type":"bool","internalType":"bool"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"setNonce","inputs":[{"name":"addressPrefix","type":"bytes19","internalType":"bytes19"},{"name":"nonceNamespace","type":"uint256","internalType":"uint256"},{"name":"nonce","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"setOperator","inputs":[{"name":"addressPrefix","type":"bytes19","internalType":"bytes19"},{"name":"operator","type":"address","internalType":"address"},{"name":"operatorBitField","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"setPermitDisabledMode","inputs":[{"name":"addressPrefix","type":"bytes19","internalType":"bytes19"},{"name":"enabled","type":"bool","internalType":"bool"}],"outputs":[],"stateMutability":"payable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"areChecksDeferred()":"430292b3","areChecksInProgress()":"e21e537c","batch((address,address,uint256,bytes)[])":"c16ae7a4","batchRevert((address,address,uint256,bytes)[])":"7f5c92f3","batchSimulation((address,address,uint256,bytes)[])":"7f17c377","call(address,address,uint256,bytes)":"1f8b5215","controlCollateral(address,address,uint256,bytes)":"b9b70ff5","disableCollateral(address,address)":"e920e8e0","disableController(address)":"f4fc3570","enableCollateral(address,address)":"d44fee5a","enableController(address,address)":"c368516c","forgiveAccountStatusCheck(address)":"10a75198","forgiveVaultStatusCheck()":"ebf1ea86","getAccountOwner(address)":"442b172c","getAddressPrefix(address)":"506d8c92","getCollaterals(address)":"a4d25d1e","getControllers(address)":"fd6046d7","getCurrentOnBehalfOfAccount(address)":"18503a1e","getLastAccountStatusCheckTimestamp(address)":"df7c1384","getNonce(bytes19,uint256)":"12d6c936","getOperator(bytes19,address)":"b03c130d","getRawExecutionContext()":"3a1a3a1d","haveCommonOwner(address,address)":"c760d921","isAccountOperatorAuthorized(address,address)":"1647292a","isAccountStatusCheckDeferred(address)":"42e53499","isCollateralEnabled(address,address)":"9e716d58","isControlCollateralInProgress()":"863789d7","isControllerEnabled(address,address)":"47cfdac4","isLockdownMode(bytes19)":"3b10f3ef","isOperatorAuthenticated()":"3b2416be","isPermitDisabledMode(bytes19)":"cb29955a","isSimulationInProgress()":"92d2fc01","isVaultStatusCheckDeferred(address)":"cdd8ea78","permit(address,address,uint256,uint256,uint256,uint256,bytes,bytes)":"5bedd1cd","reorderCollaterals(address,uint8,uint8)":"642ea23f","requireAccountAndVaultStatusCheck(address)":"30f31667","requireAccountStatusCheck(address)":"46591032","requireVaultStatusCheck()":"a37d54af","setAccountOperator(address,address,bool)":"9f5c462a","setLockdownMode(bytes19,bool)":"129d21a0","setNonce(bytes19,uint256,uint256)":"a829aaf5","setOperator(bytes19,address,uint256)":"c14c11bf","setPermitDisabledMode(bytes19,bool)":"116d0e93"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"areChecksDeferred\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"areChecksInProgress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"targetContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"onBehalfOfAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IEVC.BatchItem[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"name\":\"batch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"targetContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"onBehalfOfAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IEVC.BatchItem[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"name\":\"batchRevert\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"targetContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"onBehalfOfAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IEVC.BatchItem[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"name\":\"batchSimulation\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"internalType\":\"struct IEVC.BatchItemResult[]\",\"name\":\"batchItemsResult\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"checkedAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"internalType\":\"struct IEVC.StatusCheckResult[]\",\"name\":\"accountsStatusCheckResult\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"checkedAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"internalType\":\"struct IEVC.StatusCheckResult[]\",\"name\":\"vaultsStatusCheckResult\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"onBehalfOfAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"call\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"onBehalfOfAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"controlCollateral\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"disableCollateral\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"disableController\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"enableCollateral\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"enableController\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"forgiveAccountStatusCheck\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forgiveVaultStatusCheck\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAddressPrefix\",\"outputs\":[{\"internalType\":\"bytes19\",\"name\":\"\",\"type\":\"bytes19\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCollaterals\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getControllers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controllerToCheck\",\"type\":\"address\"}],\"name\":\"getCurrentOnBehalfOfAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"onBehalfOfAccount\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"controllerEnabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLastAccountStatusCheckTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes19\",\"name\":\"addressPrefix\",\"type\":\"bytes19\"},{\"internalType\":\"uint256\",\"name\":\"nonceNamespace\",\"type\":\"uint256\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes19\",\"name\":\"addressPrefix\",\"type\":\"bytes19\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"getOperator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"operatorBitField\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRawExecutionContext\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"context\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"otherAccount\",\"type\":\"address\"}],\"name\":\"haveCommonOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isAccountOperatorAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"authorized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAccountStatusCheckDeferred\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"isCollateralEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isControlCollateralInProgress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"isControllerEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes19\",\"name\":\"addressPrefix\",\"type\":\"bytes19\"}],\"name\":\"isLockdownMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOperatorAuthenticated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes19\",\"name\":\"addressPrefix\",\"type\":\"bytes19\"}],\"name\":\"isPermitDisabledMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSimulationInProgress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"isVaultStatusCheckDeferred\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonceNamespace\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"index1\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"index2\",\"type\":\"uint8\"}],\"name\":\"reorderCollaterals\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"requireAccountAndVaultStatusCheck\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"requireAccountStatusCheck\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requireVaultStatusCheck\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"setAccountOperator\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes19\",\"name\":\"addressPrefix\",\"type\":\"bytes19\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setLockdownMode\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes19\",\"name\":\"addressPrefix\",\"type\":\"bytes19\"},{\"internalType\":\"uint256\",\"name\":\"nonceNamespace\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"setNonce\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes19\",\"name\":\"addressPrefix\",\"type\":\"bytes19\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"operatorBitField\",\"type\":\"uint256\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes19\",\"name\":\"addressPrefix\",\"type\":\"bytes19\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setPermitDisabledMode\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Euler Labs (https://www.eulerlabs.com/)\",\"custom:security-contact\":\"security@euler.xyz\",\"kind\":\"dev\",\"methods\":{\"areChecksDeferred()\":{\"returns\":{\"_0\":\"A boolean indicating whether checks are deferred.\"}},\"areChecksInProgress()\":{\"returns\":{\"_0\":\"A boolean indicating whether checks are in progress.\"}},\"batch((address,address,uint256,bytes)[])\":{\"details\":\"This function defers the account and vault status checks (it's a checks-deferrable call). If the outermost call ends, the account and vault status checks are performed.The authentication rules for each batch item are the same as for the call function.\",\"params\":{\"items\":\"An array of batch items to be executed.\"}},\"batchRevert((address,address,uint256,bytes)[])\":{\"details\":\"This function always reverts as it's only used for simulation purposes. This function cannot be called within a checks-deferrable call.\",\"params\":{\"items\":\"An array of batch items to be executed.\"}},\"batchSimulation((address,address,uint256,bytes)[])\":{\"details\":\"This function does not modify state and should only be used for simulation purposes. This function cannot be called within a checks-deferrable call.\",\"params\":{\"items\":\"An array of batch items to be executed.\"},\"returns\":{\"accountsStatusCheckResult\":\"An array of account status check results for each account.\",\"batchItemsResult\":\"An array of batch item results for each item.\",\"vaultsStatusCheckResult\":\"An array of vault status check results for each vault.\"}},\"call(address,address,uint256,bytes)\":{\"details\":\"This function defers the account and vault status checks (it's a checks-deferrable call). If the outermost call ends, the account and vault status checks are performed.This function can be used to interact with any contract while checks are deferred. If the target contract is msg.sender, msg.sender is called back with the calldata provided and the context set up according to the account provided. If the target contract is not msg.sender, only the owner or the operator of the account provided can call this function.This function can be used to recover the remaining value from the EVC contract.\",\"params\":{\"data\":\"The encoded data which is called on the target contract.\",\"onBehalfOfAccount\":\"If the target contract is msg.sender, the address of the account which will be set in the context. It assumes msg.sender has authenticated the account themselves. If the target contract is not msg.sender, the address of the account for which it is checked whether msg.sender is authorized to act on behalf of.\",\"targetContract\":\"The address of the contract to be called.\",\"value\":\"The amount of value to be forwarded with the call. If the value is type(uint256).max, the whole balance of the EVC contract will be forwarded.\"},\"returns\":{\"result\":\"The result of the call.\"}},\"controlCollateral(address,address,uint256,bytes)\":{\"details\":\"This function defers the account and vault status checks (it's a checks-deferrable call). If the outermost call ends, the account and vault status checks are performed.This function can be used to interact with any contract while checks are deferred as long as the contract is enabled as a collateral of the account and the msg.sender is the only enabled controller of the account.\",\"params\":{\"data\":\"The encoded data which is called on the target collateral.\",\"onBehalfOfAccount\":\"The address of the account for which it is checked whether msg.sender is authorized to act on behalf.\",\"targetCollateral\":\"The collateral address to be called.\",\"value\":\"The amount of value to be forwarded with the call. If the value is type(uint256).max, the whole balance of the EVC contract will be forwarded.\"},\"returns\":{\"result\":\"The result of the call.\"}},\"disableCollateral(address,address)\":{\"details\":\"This function does not preserve the order of collaterals in the array obtained using the getCollaterals function; the order may change. A collateral is a vault for which account\\u2019s balances are under the control of the currently enabled controller vault. Only the owner or an operator of the account can call this function. Disabling a collateral might change the order of collaterals in the array obtained using getCollaterals function. Account status checks are performed.\",\"params\":{\"account\":\"The account address for which the collateral is being disabled.\",\"vault\":\"The address of a collateral being disabled.\"}},\"disableController(address)\":{\"details\":\"A controller is a vault that has been chosen for an account to have special control over account\\u2019s balances in the enabled collaterals vaults. Only the vault itself can call this function. Disabling a controller might change the order of controllers in the array obtained using getControllers function. Account status checks are performed.\",\"params\":{\"account\":\"The address for which the calling controller is being disabled.\"}},\"enableCollateral(address,address)\":{\"details\":\"A collaterals is a vault for which account's balances are under the control of the currently enabled controller vault. Only the owner or an operator of the account can call this function. Unless it's a duplicate, the collateral is added to the end of the array. There can be at most 10 unique collaterals enabled at a time. Account status checks are performed.\",\"params\":{\"account\":\"The account address for which the collateral is being enabled.\",\"vault\":\"The address being enabled as a collateral.\"}},\"enableController(address,address)\":{\"details\":\"A controller is a vault that has been chosen for an account to have special control over account\\u2019s balances in the enabled collaterals vaults. Only the owner or an operator of the account can call this function. Unless it's a duplicate, the controller is added to the end of the array. Transiently, there can be at most 10 unique controllers enabled at a time, but at most one can be enabled after the outermost checks-deferrable call concludes. Account status checks are performed.\",\"params\":{\"account\":\"The address for which the controller is being enabled.\",\"vault\":\"The address of the controller being enabled.\"}},\"forgiveAccountStatusCheck(address)\":{\"details\":\"Account address is removed from the set of addresses for which status checks are deferred. This function can only be called by the currently enabled controller of a given account. Depending on the vault implementation, may be needed in the liquidation flow.\",\"params\":{\"account\":\"The address of the account for which the status check is forgiven.\"}},\"forgiveVaultStatusCheck()\":{\"details\":\"Vault address is removed from the set of addresses for which status checks are deferred. This function can only be called by the vault itself.\"},\"getAccountOwner(address)\":{\"details\":\"The function returns address(0) if the owner is not registered. Registration of the owner happens on the initial interaction with the EVC that requires authentication of an owner.\",\"params\":{\"account\":\"The address of the account whose owner is being retrieved.\"},\"returns\":{\"_0\":\"owner The address of the account owner. An account owner is an EOA/smart contract which address matches the first 19 bytes of the account address.\"}},\"getAddressPrefix(address)\":{\"details\":\"The address prefix is the first 19 bytes of the account address.\",\"params\":{\"account\":\"The address of the account whose address prefix is being retrieved.\"},\"returns\":{\"_0\":\"A bytes19 value that represents the address prefix of the account.\"}},\"getCollaterals(address)\":{\"details\":\"A collateral is a vault for which an account's balances are under the control of the currently enabled controller vault.\",\"params\":{\"account\":\"The address of the account whose collaterals are being queried.\"},\"returns\":{\"_0\":\"An array of addresses that are enabled collaterals for the account.\"}},\"getControllers(address)\":{\"details\":\"A controller is a vault that has been chosen for an account to have special control over the account's balances in enabled collaterals vaults. A user can have multiple controllers during a call execution, but at most one can be selected when the account status check is performed.\",\"params\":{\"account\":\"The address of the account whose controllers are being queried.\"},\"returns\":{\"_0\":\"An array of addresses that are the enabled controllers for the account.\"}},\"getCurrentOnBehalfOfAccount(address)\":{\"details\":\"This function should only be used by external smart contracts if msg.sender is the EVC. Otherwise, the account address returned must not be trusted.When checks in progress, on behalf of account is always address(0). When address is zero, the function reverts to protect the consumer from ever relying on the on behalf of account address which is in its default state.\",\"params\":{\"controllerToCheck\":\"The address of the controller for which it is checked whether it is an enabled controller for the account on behalf of which the operation is being executed at the moment.\"},\"returns\":{\"controllerEnabled\":\"A boolean value that indicates whether controllerToCheck is an enabled controller for the account on behalf of which the operation is being executed at the moment. Always false if controllerToCheck is address(0).\",\"onBehalfOfAccount\":\"An account that has been authenticated and on behalf of which the operation is being executed at the moment.\"}},\"getLastAccountStatusCheckTimestamp(address)\":{\"details\":\"This function reverts if the checks are in progress.The account status check is considered to be successful if it calls into the selected controller vault and obtains expected magic value. This timestamp does not change if the account status is considered valid when no controller enabled. When consuming, one might need to ensure that the account status check is not deferred at the moment.\",\"params\":{\"account\":\"The address of the account for which the last status check timestamp is being queried.\"},\"returns\":{\"_0\":\"The timestamp of the last status check as a uint256.\"}},\"getNonce(bytes19,uint256)\":{\"details\":\"Each nonce namespace provides 256 bit nonce that has to be used sequentially. There's no requirement to use all the nonces for a given nonce namespace before moving to the next one which allows to use permit messages in a non-sequential manner.\",\"params\":{\"addressPrefix\":\"The address prefix for which the nonce is being retrieved.\",\"nonceNamespace\":\"The nonce namespace for which the nonce is being retrieved.\"},\"returns\":{\"nonce\":\"The current nonce for the given address prefix and nonce namespace.\"}},\"getOperator(bytes19,address)\":{\"details\":\"The bit field is used to store information about authorized operators for a given address prefix. Each bit in the bit field corresponds to one account belonging to the same owner. If the bit is set, the operator is authorized for the account.\",\"params\":{\"addressPrefix\":\"The address prefix for which the bit field is being retrieved.\",\"operator\":\"The address of the operator for which the bit field is being retrieved.\"},\"returns\":{\"operatorBitField\":\"The bit field for the given address prefix and operator. The bit field defines which accounts the operator is authorized for. It is a 256-position binary array like 0...010...0, marking the account positionally in a uint256. The position in the bit field corresponds to the account ID (0-255), where 0 is the owner account's ID.\"}},\"getRawExecutionContext()\":{\"details\":\"When checks in progress, on behalf of account is always address(0).\",\"returns\":{\"context\":\"Current raw execution context.\"}},\"haveCommonOwner(address,address)\":{\"details\":\"The function is used to check whether one account is authorized to perform operations on behalf of the other. Accounts are considered to have a common owner if they share the first 19 bytes of their address.\",\"params\":{\"account\":\"The address of the account that is being checked.\",\"otherAccount\":\"The address of the other account that is being checked.\"},\"returns\":{\"_0\":\"A boolean flag that indicates whether the accounts have the same owner.\"}},\"isAccountOperatorAuthorized(address,address)\":{\"params\":{\"account\":\"The address of the account whose operator is being checked.\",\"operator\":\"The address of the operator that is being checked.\"},\"returns\":{\"authorized\":\"A boolean value that indicates whether the operator is authorized for the account.\"}},\"isAccountStatusCheckDeferred(address)\":{\"details\":\"This function reverts if the checks are in progress.\",\"params\":{\"account\":\"The address of the account for which it is checked whether the status check is deferred.\"},\"returns\":{\"_0\":\"A boolean flag that indicates whether the status check is deferred or not.\"}},\"isCollateralEnabled(address,address)\":{\"details\":\"A collateral is a vault for which account's balances are under the control of the currently enabled controller vault.\",\"params\":{\"account\":\"The address of the account that is being checked.\",\"vault\":\"The address of the collateral that is being checked.\"},\"returns\":{\"_0\":\"A boolean value that indicates whether the vault is an enabled collateral for the account or not.\"}},\"isControlCollateralInProgress()\":{\"returns\":{\"_0\":\"A boolean indicating whether control collateral is in progress.\"}},\"isControllerEnabled(address,address)\":{\"details\":\"A controller is a vault that has been chosen for an account to have special control over account\\u2019s balances in the enabled collaterals vaults.\",\"params\":{\"account\":\"The address of the account that is being checked.\",\"vault\":\"The address of the controller that is being checked.\"},\"returns\":{\"_0\":\"A boolean value that indicates whether the vault is enabled controller for the account or not.\"}},\"isLockdownMode(bytes19)\":{\"params\":{\"addressPrefix\":\"The address prefix to check for lockdown mode status.\"},\"returns\":{\"_0\":\"A boolean indicating whether lockdown mode is enabled.\"}},\"isOperatorAuthenticated()\":{\"returns\":{\"_0\":\"A boolean indicating whether an operator is authenticated.\"}},\"isPermitDisabledMode(bytes19)\":{\"params\":{\"addressPrefix\":\"The address prefix to check for permit functionality status.\"},\"returns\":{\"_0\":\"A boolean indicating whether permit functionality is disabled.\"}},\"isSimulationInProgress()\":{\"returns\":{\"_0\":\"A boolean indicating whether a simulation is in progress.\"}},\"isVaultStatusCheckDeferred(address)\":{\"details\":\"This function reverts if the checks are in progress.\",\"params\":{\"vault\":\"The address of the vault for which it is checked whether the status check is deferred.\"},\"returns\":{\"_0\":\"A boolean flag that indicates whether the status check is deferred or not.\"}},\"permit(address,address,uint256,uint256,uint256,uint256,bytes,bytes)\":{\"details\":\"Low-level call function is used to execute the arbitrary data signed by the owner or the operator on the EVC contract. During that call, EVC becomes msg.sender.\",\"params\":{\"data\":\"The encoded data which is self-called on the EVC contract.\",\"deadline\":\"The timestamp after which the permit is considered expired.\",\"nonce\":\"The nonce for the given account and nonce namespace. A valid nonce value is considered to be the value currently stored and can take any value between 0 and type(uint256).max - 1.\",\"nonceNamespace\":\"The nonce namespace for which the nonce is being used.\",\"sender\":\"The address of the msg.sender which is expected to execute the data signed by the signer. If address(0) is passed, the msg.sender is ignored.\",\"signature\":\"The signature of the data signed by the signer.\",\"signer\":\"The address signing the permit message (ECDSA) or verifying the permit message signature (ERC-1271). It's also the owner or the operator of all the accounts for which authentication will be needed during the execution of the arbitrary data call.\",\"value\":\"The amount of value to be forwarded with the call. If the value is type(uint256).max, the whole balance of the EVC contract will be forwarded.\"}},\"reorderCollaterals(address,uint8,uint8)\":{\"details\":\"A collateral is a vault for which account\\u2019s balances are under the control of the currently enabled controller vault. Only the owner or an operator of the account can call this function. The order of collaterals can be changed by specifying the indices of the two collaterals to be swapped. Indices are zero-based and must be in the range of 0 to the number of collaterals minus 1. index1 must be lower than index2. Account status checks are performed.\",\"params\":{\"account\":\"The address of the account for which the collaterals are being reordered.\",\"index1\":\"The index of the first collateral to be swapped.\",\"index2\":\"The index of the second collateral to be swapped.\"}},\"requireAccountAndVaultStatusCheck(address)\":{\"details\":\"If checks deferred, the account and the vault are added to the respective sets of accounts and vaults to be checked at the end of the outermost checks-deferrable call. Account status check is performed by calling into selected controller vault and passing the array of currently enabled collaterals. If controller is not selected, the account is always considered valid. This function can only be called by the vault itself.\",\"params\":{\"account\":\"The address of the account to be checked.\"}},\"requireAccountStatusCheck(address)\":{\"details\":\"If checks deferred, the account is added to the set of accounts to be checked at the end of the outermost checks-deferrable call. There can be at most 10 unique accounts added to the set at a time. Account status check is performed by calling into the selected controller vault and passing the array of currently enabled collaterals. If controller is not selected, the account is always considered valid.\",\"params\":{\"account\":\"The address of the account to be checked.\"}},\"requireVaultStatusCheck()\":{\"details\":\"If checks deferred, the vault is added to the set of vaults to be checked at the end of the outermost checks-deferrable call. There can be at most 10 unique vaults added to the set at a time. This function can only be called by the vault itself.\"},\"setAccountOperator(address,address,bool)\":{\"details\":\"Only the owner or authorized operator of the account can call this function. An operator is an address that can perform actions for an account on behalf of the owner. If it's an operator calling this function, it can only deauthorize itself.\",\"params\":{\"account\":\"The address of the account whose operator is being set or unset.\",\"authorized\":\"A boolean value that indicates whether the operator is being authorized or deauthorized. Reverts if the provided value is equal to the currently stored value.\",\"operator\":\"The address of the operator that is being installed or uninstalled. Can neither be the EVC address nor an address belonging to the same owner as the account.\"}},\"setLockdownMode(bytes19,bool)\":{\"details\":\"This function can only be called by the owner of the address prefix. To disable this mode, the EVC must be called directly. It is not possible to disable this mode by using checks-deferrable call or permit message.\",\"params\":{\"addressPrefix\":\"The address prefix for which the lockdown mode is being set.\",\"enabled\":\"A boolean indicating whether to enable or disable lockdown mode.\"}},\"setNonce(bytes19,uint256,uint256)\":{\"details\":\"This function can only be called by the owner of the address prefix. Each nonce namespace provides a 256 bit nonce that has to be used sequentially. There's no requirement to use all the nonces for a given nonce namespace before moving to the next one which allows the use of permit messages in a non-sequential manner. To invalidate signed permit messages, set the nonce for a given nonce namespace accordingly. To invalidate all the permit messages for a given nonce namespace, set the nonce to type(uint).max.\",\"params\":{\"addressPrefix\":\"The address prefix for which the nonce is being set.\",\"nonce\":\"The new nonce for the given address prefix and nonce namespace.\",\"nonceNamespace\":\"The nonce namespace for which the nonce is being set.\"}},\"setOperator(bytes19,address,uint256)\":{\"details\":\"This function can only be called by the owner of the address prefix. Each bit in the bit field corresponds to one account belonging to the same owner. If the bit is set, the operator is authorized for the account.\",\"params\":{\"addressPrefix\":\"The address prefix for which the bit field is being set.\",\"operator\":\"The address of the operator for which the bit field is being set. Can neither be the EVC address nor an address belonging to the same address prefix.\",\"operatorBitField\":\"The new bit field for the given address prefix and operator. Reverts if the provided value is equal to the currently stored value.\"}},\"setPermitDisabledMode(bytes19,bool)\":{\"details\":\"This function can only be called by the owner of the address prefix. To disable this mode, the EVC must be called directly. It is not possible to disable this mode by using checks-deferrable call or (by definition) permit message. To support permit functionality by default, note that the logic was inverted here. To disable  the permit functionality, one must pass true as the second argument. To enable the permit functionality, one must pass false as the second argument.\",\"params\":{\"addressPrefix\":\"The address prefix for which the permit functionality is being set.\",\"enabled\":\"A boolean indicating whether to enable or disable the disable-permit mode.\"}}},\"title\":\"IEVC\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"areChecksDeferred()\":{\"notice\":\"Checks if checks are deferred.\"},\"areChecksInProgress()\":{\"notice\":\"Checks if checks are in progress.\"},\"batch((address,address,uint256,bytes)[])\":{\"notice\":\"Executes multiple calls into the target contracts while checks deferred as per batch items provided.\"},\"batchRevert((address,address,uint256,bytes)[])\":{\"notice\":\"Executes multiple calls into the target contracts while checks deferred as per batch items provided.\"},\"batchSimulation((address,address,uint256,bytes)[])\":{\"notice\":\"Executes multiple calls into the target contracts while checks deferred as per batch items provided.\"},\"call(address,address,uint256,bytes)\":{\"notice\":\"Calls into a target contract as per data encoded.\"},\"controlCollateral(address,address,uint256,bytes)\":{\"notice\":\"For a given account, calls into one of the enabled collateral vaults from the currently enabled controller vault as per data encoded.\"},\"disableCollateral(address,address)\":{\"notice\":\"Disables a collateral for an account.\"},\"disableController(address)\":{\"notice\":\"Disables a controller for an account.\"},\"enableCollateral(address,address)\":{\"notice\":\"Enables a collateral for an account.\"},\"enableController(address,address)\":{\"notice\":\"Enables a controller for an account.\"},\"forgiveAccountStatusCheck(address)\":{\"notice\":\"Forgives previously deferred account status check.\"},\"forgiveVaultStatusCheck()\":{\"notice\":\"Forgives previously deferred vault status check.\"},\"getAccountOwner(address)\":{\"notice\":\"Returns the owner for the specified account.\"},\"getAddressPrefix(address)\":{\"notice\":\"Returns the address prefix of the specified account.\"},\"getCollaterals(address)\":{\"notice\":\"Returns an array of collaterals enabled for an account.\"},\"getControllers(address)\":{\"notice\":\"Returns an array of enabled controllers for an account.\"},\"getCurrentOnBehalfOfAccount(address)\":{\"notice\":\"Returns an account on behalf of which the operation is being executed at the moment and whether the controllerToCheck is an enabled controller for that account.\"},\"getLastAccountStatusCheckTimestamp(address)\":{\"notice\":\"Retrieves the timestamp of the last successful account status check performed for a specific account.\"},\"getNonce(bytes19,uint256)\":{\"notice\":\"Returns the current nonce for a given address prefix and nonce namespace.\"},\"getOperator(bytes19,address)\":{\"notice\":\"Returns the bit field for a given address prefix and operator.\"},\"getRawExecutionContext()\":{\"notice\":\"Returns current raw execution context.\"},\"haveCommonOwner(address,address)\":{\"notice\":\"Checks whether the specified account and the other account have the same owner.\"},\"isAccountOperatorAuthorized(address,address)\":{\"notice\":\"Returns whether a given operator has been authorized for a given account.\"},\"isAccountStatusCheckDeferred(address)\":{\"notice\":\"Checks whether the status check is deferred for a given account.\"},\"isCollateralEnabled(address,address)\":{\"notice\":\"Returns whether a collateral is enabled for an account.\"},\"isControlCollateralInProgress()\":{\"notice\":\"Checks if control collateral is in progress.\"},\"isControllerEnabled(address,address)\":{\"notice\":\"Returns whether a controller is enabled for an account.\"},\"isLockdownMode(bytes19)\":{\"notice\":\"Checks if lockdown mode is enabled for a given address prefix.\"},\"isOperatorAuthenticated()\":{\"notice\":\"Checks if an operator is authenticated.\"},\"isPermitDisabledMode(bytes19)\":{\"notice\":\"Checks if permit functionality is disabled for a given address prefix.\"},\"isSimulationInProgress()\":{\"notice\":\"Checks if a simulation is in progress.\"},\"isVaultStatusCheckDeferred(address)\":{\"notice\":\"Checks whether the status check is deferred for a given vault.\"},\"permit(address,address,uint256,uint256,uint256,uint256,bytes,bytes)\":{\"notice\":\"Executes signed arbitrary data by self-calling into the EVC.\"},\"reorderCollaterals(address,uint8,uint8)\":{\"notice\":\"Swaps the position of two collaterals so that they appear switched in the array of collaterals for a given account obtained by calling getCollaterals function.\"},\"requireAccountAndVaultStatusCheck(address)\":{\"notice\":\"Checks the status of an account and a vault and reverts if it is not valid.\"},\"requireAccountStatusCheck(address)\":{\"notice\":\"Checks the status of an account and reverts if it is not valid.\"},\"requireVaultStatusCheck()\":{\"notice\":\"Checks the status of a vault and reverts if it is not valid.\"},\"setAccountOperator(address,address,bool)\":{\"notice\":\"Authorizes or deauthorizes an operator for the account.\"},\"setLockdownMode(bytes19,bool)\":{\"notice\":\"Enables or disables lockdown mode for a given address prefix.\"},\"setNonce(bytes19,uint256,uint256)\":{\"notice\":\"Sets the nonce for a given address prefix and nonce namespace.\"},\"setOperator(bytes19,address,uint256)\":{\"notice\":\"Sets the bit field for a given address prefix and operator.\"},\"setPermitDisabledMode(bytes19,bool)\":{\"notice\":\"Enables or disables permit functionality for a given address prefix.\"}},\"notice\":\"This interface defines the methods for the Ethereum Vault Connector.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/ethereum-vault-connector/src/interfaces/IEthereumVaultConnector.sol\":\"IEVC\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[\":@ensdomains/=lib/euler-swap/lib/v4-periphery/lib/v4-core/node_modules/@ensdomains/\",\":@layerzerolabs/lz-evm-messagelib-v2/=lib/layerzero-v2/packages/layerzero-v2/evm/messagelib/\",\":@layerzerolabs/lz-evm-oapp-v2/=lib/layerzero-v2/packages/layerzero-v2/evm/oapp/\",\":@layerzerolabs/lz-evm-protocol-v2/=lib/layerzero-v2/packages/layerzero-v2/evm/protocol/\",\":@layerzerolabs/oapp-evm-upgradeable/=lib/layerzero-devtools/packages/oapp-evm-upgradeable/\",\":@layerzerolabs/oapp-evm/=lib/layerzero-devtools/packages/oapp-evm/\",\":@layerzerolabs/oft-evm/=lib/layerzero-devtools/packages/oft-evm/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@pendle/core-v2/=lib/euler-price-oracle/lib/pendle-core-v2-public/contracts/\",\":@pyth/=lib/euler-price-oracle/lib/pyth-sdk-solidity/\",\":@redstone/evm-connector/=lib/euler-price-oracle/lib/redstone-oracles-monorepo/packages/evm-connector/contracts/\",\":@solady/=lib/euler-price-oracle/lib/solady/src/\",\":@uniswap/v3-core/=lib/euler-price-oracle/lib/v3-core/\",\":@uniswap/v3-periphery/=lib/euler-price-oracle/lib/v3-periphery/\",\":@uniswap/v4-core/=lib/euler-swap/lib/v4-periphery/lib/v4-core/\",\":ds-test/=lib/fee-flow/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":ethereum-vault-connector/=lib/ethereum-vault-connector/src/\",\":euler-earn/=lib/euler-earn/src/\",\":euler-price-oracle-test/=lib/euler-price-oracle/test/\",\":euler-price-oracle/=lib/euler-price-oracle/src/\",\":euler-swap/=lib/euler-swap/\",\":euler-vault-kit/=lib/euler-vault-kit/\",\":evc/=lib/ethereum-vault-connector/src/\",\":evk-test/=lib/euler-vault-kit/test/\",\":evk/=lib/euler-vault-kit/src/\",\":fee-flow/=lib/fee-flow/src/\",\":forge-gas-snapshot/=lib/euler-vault-kit/lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts-upgradeable/lib/halmos-cheatcodes/src/\",\":hardhat/=lib/euler-swap/lib/v4-periphery/lib/v4-core/node_modules/hardhat/\",\":layerzero-devtools/=lib/layerzero-devtools/packages/toolbox-foundry/src/\",\":layerzero-v2/=lib/layerzero-v2/\",\":layerzero/oft-evm-upgradeable/=lib/layerzero-devtools/packages/oft-evm-upgradeable/contracts/\",\":layerzero/oft-evm/=lib/layerzero-devtools/packages/oft-evm/contracts/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\":openzeppelin/=lib/ethereum-vault-connector/lib/openzeppelin-contracts/contracts/\",\":pendle-core-v2-public/=lib/euler-price-oracle/lib/pendle-core-v2-public/contracts/\",\":permit2/=lib/euler-vault-kit/lib/permit2/\",\":pyth-sdk-solidity/=lib/euler-price-oracle/lib/pyth-sdk-solidity/\",\":redstone-oracles-monorepo/=lib/euler-price-oracle/lib/\",\":reward-streams/=lib/reward-streams/src/\",\":solady/=lib/euler-price-oracle/lib/solady/src/\",\":solidity-bytes-utils/=lib/solidity-bytes-utils/\",\":solmate/=lib/fee-flow/lib/solmate/src/\",\":v3-core/=lib/euler-price-oracle/lib/v3-core/contracts/\",\":v3-periphery/=lib/euler-price-oracle/lib/v3-periphery/contracts/\",\":v4-core/=lib/euler-swap/lib/v4-periphery/lib/v4-core/src/\",\":v4-periphery/=lib/euler-swap/lib/v4-periphery/\",\"lib/euler-earn:@openzeppelin-upgradeable/=lib/euler-earn/lib/openzeppelin-contracts-upgradeable/contracts/\",\"lib/euler-earn:@openzeppelin/=lib/euler-earn/lib/openzeppelin-contracts/\",\"lib/euler-earn:ethereum-vault-connector/=lib/euler-earn/lib/ethereum-vault-connector/src/\",\"lib/euler-price-oracle:@openzeppelin/contracts/=lib/euler-price-oracle/lib/openzeppelin-contracts/contracts/\",\"lib/euler-swap:solmate/=lib/euler-swap/lib/euler-vault-kit/lib/permit2/lib/solmate/\",\"lib/fee-flow/src:solmate/=lib/fee-flow/lib/solmate/src/\",\"lib/fee-flow/tokens:solmate/=lib/fee-flow/lib/solmate/tokens/\",\"lib/fee-flow/utils:solmate/=lib/fee-flow/lib/solmate/utils/\",\"lib/layerzero-devtools/packages/oapp-evm-upgradeable/contracts:@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\"lib/layerzero-devtools/packages/oft-evm-upgradeable/contracts:@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\"lib/layerzero-devtools/packages/oft-evm/contracts:@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts/contracts/\"]},\"sources\":{\"lib/ethereum-vault-connector/src/interfaces/IEthereumVaultConnector.sol\":{\"keccak256\":\"0x2d7b4cf0a3346feada4b7bc2c661c89fa60a485f498f374078a934cd4ece7c7b\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://e8c832fdc952913ffeec92cdbf06266b427c66d87ad1b5d027c73b22fc4fc82d\",\"dweb:/ipfs/QmPEcrWAR85tMKBFQDnTZxgXPVENRU2B6MBgzgRBhbV8oP\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.24+commit.e11b9ed9"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"view","type":"function","name":"areChecksDeferred","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"areChecksInProgress","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"struct IEVC.BatchItem[]","name":"items","type":"tuple[]","components":[{"internalType":"address","name":"targetContract","type":"address"},{"internalType":"address","name":"onBehalfOfAccount","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}]}],"stateMutability":"payable","type":"function","name":"batch"},{"inputs":[{"internalType":"struct IEVC.BatchItem[]","name":"items","type":"tuple[]","components":[{"internalType":"address","name":"targetContract","type":"address"},{"internalType":"address","name":"onBehalfOfAccount","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}]}],"stateMutability":"payable","type":"function","name":"batchRevert"},{"inputs":[{"internalType":"struct IEVC.BatchItem[]","name":"items","type":"tuple[]","components":[{"internalType":"address","name":"targetContract","type":"address"},{"internalType":"address","name":"onBehalfOfAccount","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}]}],"stateMutability":"payable","type":"function","name":"batchSimulation","outputs":[{"internalType":"struct IEVC.BatchItemResult[]","name":"batchItemsResult","type":"tuple[]","components":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"result","type":"bytes"}]},{"internalType":"struct IEVC.StatusCheckResult[]","name":"accountsStatusCheckResult","type":"tuple[]","components":[{"internalType":"address","name":"checkedAddress","type":"address"},{"internalType":"bool","name":"isValid","type":"bool"},{"internalType":"bytes","name":"result","type":"bytes"}]},{"internalType":"struct IEVC.StatusCheckResult[]","name":"vaultsStatusCheckResult","type":"tuple[]","components":[{"internalType":"address","name":"checkedAddress","type":"address"},{"internalType":"bool","name":"isValid","type":"bool"},{"internalType":"bytes","name":"result","type":"bytes"}]}]},{"inputs":[{"internalType":"address","name":"targetContract","type":"address"},{"internalType":"address","name":"onBehalfOfAccount","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"payable","type":"function","name":"call","outputs":[{"internalType":"bytes","name":"result","type":"bytes"}]},{"inputs":[{"internalType":"address","name":"targetCollateral","type":"address"},{"internalType":"address","name":"onBehalfOfAccount","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"payable","type":"function","name":"controlCollateral","outputs":[{"internalType":"bytes","name":"result","type":"bytes"}]},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"vault","type":"address"}],"stateMutability":"payable","type":"function","name":"disableCollateral"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"stateMutability":"payable","type":"function","name":"disableController"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"vault","type":"address"}],"stateMutability":"payable","type":"function","name":"enableCollateral"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"vault","type":"address"}],"stateMutability":"payable","type":"function","name":"enableController"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"stateMutability":"payable","type":"function","name":"forgiveAccountStatusCheck"},{"inputs":[],"stateMutability":"payable","type":"function","name":"forgiveVaultStatusCheck"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"stateMutability":"view","type":"function","name":"getAccountOwner","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"stateMutability":"pure","type":"function","name":"getAddressPrefix","outputs":[{"internalType":"bytes19","name":"","type":"bytes19"}]},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"stateMutability":"view","type":"function","name":"getCollaterals","outputs":[{"internalType":"address[]","name":"","type":"address[]"}]},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"stateMutability":"view","type":"function","name":"getControllers","outputs":[{"internalType":"address[]","name":"","type":"address[]"}]},{"inputs":[{"internalType":"address","name":"controllerToCheck","type":"address"}],"stateMutability":"view","type":"function","name":"getCurrentOnBehalfOfAccount","outputs":[{"internalType":"address","name":"onBehalfOfAccount","type":"address"},{"internalType":"bool","name":"controllerEnabled","type":"bool"}]},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"stateMutability":"view","type":"function","name":"getLastAccountStatusCheckTimestamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"bytes19","name":"addressPrefix","type":"bytes19"},{"internalType":"uint256","name":"nonceNamespace","type":"uint256"}],"stateMutability":"view","type":"function","name":"getNonce","outputs":[{"internalType":"uint256","name":"nonce","type":"uint256"}]},{"inputs":[{"internalType":"bytes19","name":"addressPrefix","type":"bytes19"},{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function","name":"getOperator","outputs":[{"internalType":"uint256","name":"operatorBitField","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getRawExecutionContext","outputs":[{"internalType":"uint256","name":"context","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"otherAccount","type":"address"}],"stateMutability":"pure","type":"function","name":"haveCommonOwner","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function","name":"isAccountOperatorAuthorized","outputs":[{"internalType":"bool","name":"authorized","type":"bool"}]},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"stateMutability":"view","type":"function","name":"isAccountStatusCheckDeferred","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"vault","type":"address"}],"stateMutability":"view","type":"function","name":"isCollateralEnabled","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"isControlCollateralInProgress","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"vault","type":"address"}],"stateMutability":"view","type":"function","name":"isControllerEnabled","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"bytes19","name":"addressPrefix","type":"bytes19"}],"stateMutability":"view","type":"function","name":"isLockdownMode","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"isOperatorAuthenticated","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"bytes19","name":"addressPrefix","type":"bytes19"}],"stateMutability":"view","type":"function","name":"isPermitDisabledMode","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"isSimulationInProgress","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"vault","type":"address"}],"stateMutability":"view","type":"function","name":"isVaultStatusCheckDeferred","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"signer","type":"address"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonceNamespace","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"stateMutability":"payable","type":"function","name":"permit"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint8","name":"index1","type":"uint8"},{"internalType":"uint8","name":"index2","type":"uint8"}],"stateMutability":"payable","type":"function","name":"reorderCollaterals"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"stateMutability":"payable","type":"function","name":"requireAccountAndVaultStatusCheck"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"stateMutability":"payable","type":"function","name":"requireAccountStatusCheck"},{"inputs":[],"stateMutability":"payable","type":"function","name":"requireVaultStatusCheck"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"authorized","type":"bool"}],"stateMutability":"payable","type":"function","name":"setAccountOperator"},{"inputs":[{"internalType":"bytes19","name":"addressPrefix","type":"bytes19"},{"internalType":"bool","name":"enabled","type":"bool"}],"stateMutability":"payable","type":"function","name":"setLockdownMode"},{"inputs":[{"internalType":"bytes19","name":"addressPrefix","type":"bytes19"},{"internalType":"uint256","name":"nonceNamespace","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"}],"stateMutability":"payable","type":"function","name":"setNonce"},{"inputs":[{"internalType":"bytes19","name":"addressPrefix","type":"bytes19"},{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"operatorBitField","type":"uint256"}],"stateMutability":"payable","type":"function","name":"setOperator"},{"inputs":[{"internalType":"bytes19","name":"addressPrefix","type":"bytes19"},{"internalType":"bool","name":"enabled","type":"bool"}],"stateMutability":"payable","type":"function","name":"setPermitDisabledMode"}],"devdoc":{"kind":"dev","methods":{"areChecksDeferred()":{"returns":{"_0":"A boolean indicating whether checks are deferred."}},"areChecksInProgress()":{"returns":{"_0":"A boolean indicating whether checks are in progress."}},"batch((address,address,uint256,bytes)[])":{"details":"This function defers the account and vault status checks (it's a checks-deferrable call). If the outermost call ends, the account and vault status checks are performed.The authentication rules for each batch item are the same as for the call function.","params":{"items":"An array of batch items to be executed."}},"batchRevert((address,address,uint256,bytes)[])":{"details":"This function always reverts as it's only used for simulation purposes. This function cannot be called within a checks-deferrable call.","params":{"items":"An array of batch items to be executed."}},"batchSimulation((address,address,uint256,bytes)[])":{"details":"This function does not modify state and should only be used for simulation purposes. This function cannot be called within a checks-deferrable call.","params":{"items":"An array of batch items to be executed."},"returns":{"accountsStatusCheckResult":"An array of account status check results for each account.","batchItemsResult":"An array of batch item results for each item.","vaultsStatusCheckResult":"An array of vault status check results for each vault."}},"call(address,address,uint256,bytes)":{"details":"This function defers the account and vault status checks (it's a checks-deferrable call). If the outermost call ends, the account and vault status checks are performed.This function can be used to interact with any contract while checks are deferred. If the target contract is msg.sender, msg.sender is called back with the calldata provided and the context set up according to the account provided. If the target contract is not msg.sender, only the owner or the operator of the account provided can call this function.This function can be used to recover the remaining value from the EVC contract.","params":{"data":"The encoded data which is called on the target contract.","onBehalfOfAccount":"If the target contract is msg.sender, the address of the account which will be set in the context. It assumes msg.sender has authenticated the account themselves. If the target contract is not msg.sender, the address of the account for which it is checked whether msg.sender is authorized to act on behalf of.","targetContract":"The address of the contract to be called.","value":"The amount of value to be forwarded with the call. If the value is type(uint256).max, the whole balance of the EVC contract will be forwarded."},"returns":{"result":"The result of the call."}},"controlCollateral(address,address,uint256,bytes)":{"details":"This function defers the account and vault status checks (it's a checks-deferrable call). If the outermost call ends, the account and vault status checks are performed.This function can be used to interact with any contract while checks are deferred as long as the contract is enabled as a collateral of the account and the msg.sender is the only enabled controller of the account.","params":{"data":"The encoded data which is called on the target collateral.","onBehalfOfAccount":"The address of the account for which it is checked whether msg.sender is authorized to act on behalf.","targetCollateral":"The collateral address to be called.","value":"The amount of value to be forwarded with the call. If the value is type(uint256).max, the whole balance of the EVC contract will be forwarded."},"returns":{"result":"The result of the call."}},"disableCollateral(address,address)":{"details":"This function does not preserve the order of collaterals in the array obtained using the getCollaterals function; the order may change. A collateral is a vault for which account’s balances are under the control of the currently enabled controller vault. Only the owner or an operator of the account can call this function. Disabling a collateral might change the order of collaterals in the array obtained using getCollaterals function. Account status checks are performed.","params":{"account":"The account address for which the collateral is being disabled.","vault":"The address of a collateral being disabled."}},"disableController(address)":{"details":"A controller is a vault that has been chosen for an account to have special control over account’s balances in the enabled collaterals vaults. Only the vault itself can call this function. Disabling a controller might change the order of controllers in the array obtained using getControllers function. Account status checks are performed.","params":{"account":"The address for which the calling controller is being disabled."}},"enableCollateral(address,address)":{"details":"A collaterals is a vault for which account's balances are under the control of the currently enabled controller vault. Only the owner or an operator of the account can call this function. Unless it's a duplicate, the collateral is added to the end of the array. There can be at most 10 unique collaterals enabled at a time. Account status checks are performed.","params":{"account":"The account address for which the collateral is being enabled.","vault":"The address being enabled as a collateral."}},"enableController(address,address)":{"details":"A controller is a vault that has been chosen for an account to have special control over account’s balances in the enabled collaterals vaults. Only the owner or an operator of the account can call this function. Unless it's a duplicate, the controller is added to the end of the array. Transiently, there can be at most 10 unique controllers enabled at a time, but at most one can be enabled after the outermost checks-deferrable call concludes. Account status checks are performed.","params":{"account":"The address for which the controller is being enabled.","vault":"The address of the controller being enabled."}},"forgiveAccountStatusCheck(address)":{"details":"Account address is removed from the set of addresses for which status checks are deferred. This function can only be called by the currently enabled controller of a given account. Depending on the vault implementation, may be needed in the liquidation flow.","params":{"account":"The address of the account for which the status check is forgiven."}},"forgiveVaultStatusCheck()":{"details":"Vault address is removed from the set of addresses for which status checks are deferred. This function can only be called by the vault itself."},"getAccountOwner(address)":{"details":"The function returns address(0) if the owner is not registered. Registration of the owner happens on the initial interaction with the EVC that requires authentication of an owner.","params":{"account":"The address of the account whose owner is being retrieved."},"returns":{"_0":"owner The address of the account owner. An account owner is an EOA/smart contract which address matches the first 19 bytes of the account address."}},"getAddressPrefix(address)":{"details":"The address prefix is the first 19 bytes of the account address.","params":{"account":"The address of the account whose address prefix is being retrieved."},"returns":{"_0":"A bytes19 value that represents the address prefix of the account."}},"getCollaterals(address)":{"details":"A collateral is a vault for which an account's balances are under the control of the currently enabled controller vault.","params":{"account":"The address of the account whose collaterals are being queried."},"returns":{"_0":"An array of addresses that are enabled collaterals for the account."}},"getControllers(address)":{"details":"A controller is a vault that has been chosen for an account to have special control over the account's balances in enabled collaterals vaults. A user can have multiple controllers during a call execution, but at most one can be selected when the account status check is performed.","params":{"account":"The address of the account whose controllers are being queried."},"returns":{"_0":"An array of addresses that are the enabled controllers for the account."}},"getCurrentOnBehalfOfAccount(address)":{"details":"This function should only be used by external smart contracts if msg.sender is the EVC. Otherwise, the account address returned must not be trusted.When checks in progress, on behalf of account is always address(0). When address is zero, the function reverts to protect the consumer from ever relying on the on behalf of account address which is in its default state.","params":{"controllerToCheck":"The address of the controller for which it is checked whether it is an enabled controller for the account on behalf of which the operation is being executed at the moment."},"returns":{"controllerEnabled":"A boolean value that indicates whether controllerToCheck is an enabled controller for the account on behalf of which the operation is being executed at the moment. Always false if controllerToCheck is address(0).","onBehalfOfAccount":"An account that has been authenticated and on behalf of which the operation is being executed at the moment."}},"getLastAccountStatusCheckTimestamp(address)":{"details":"This function reverts if the checks are in progress.The account status check is considered to be successful if it calls into the selected controller vault and obtains expected magic value. This timestamp does not change if the account status is considered valid when no controller enabled. When consuming, one might need to ensure that the account status check is not deferred at the moment.","params":{"account":"The address of the account for which the last status check timestamp is being queried."},"returns":{"_0":"The timestamp of the last status check as a uint256."}},"getNonce(bytes19,uint256)":{"details":"Each nonce namespace provides 256 bit nonce that has to be used sequentially. There's no requirement to use all the nonces for a given nonce namespace before moving to the next one which allows to use permit messages in a non-sequential manner.","params":{"addressPrefix":"The address prefix for which the nonce is being retrieved.","nonceNamespace":"The nonce namespace for which the nonce is being retrieved."},"returns":{"nonce":"The current nonce for the given address prefix and nonce namespace."}},"getOperator(bytes19,address)":{"details":"The bit field is used to store information about authorized operators for a given address prefix. Each bit in the bit field corresponds to one account belonging to the same owner. If the bit is set, the operator is authorized for the account.","params":{"addressPrefix":"The address prefix for which the bit field is being retrieved.","operator":"The address of the operator for which the bit field is being retrieved."},"returns":{"operatorBitField":"The bit field for the given address prefix and operator. The bit field defines which accounts the operator is authorized for. It is a 256-position binary array like 0...010...0, marking the account positionally in a uint256. The position in the bit field corresponds to the account ID (0-255), where 0 is the owner account's ID."}},"getRawExecutionContext()":{"details":"When checks in progress, on behalf of account is always address(0).","returns":{"context":"Current raw execution context."}},"haveCommonOwner(address,address)":{"details":"The function is used to check whether one account is authorized to perform operations on behalf of the other. Accounts are considered to have a common owner if they share the first 19 bytes of their address.","params":{"account":"The address of the account that is being checked.","otherAccount":"The address of the other account that is being checked."},"returns":{"_0":"A boolean flag that indicates whether the accounts have the same owner."}},"isAccountOperatorAuthorized(address,address)":{"params":{"account":"The address of the account whose operator is being checked.","operator":"The address of the operator that is being checked."},"returns":{"authorized":"A boolean value that indicates whether the operator is authorized for the account."}},"isAccountStatusCheckDeferred(address)":{"details":"This function reverts if the checks are in progress.","params":{"account":"The address of the account for which it is checked whether the status check is deferred."},"returns":{"_0":"A boolean flag that indicates whether the status check is deferred or not."}},"isCollateralEnabled(address,address)":{"details":"A collateral is a vault for which account's balances are under the control of the currently enabled controller vault.","params":{"account":"The address of the account that is being checked.","vault":"The address of the collateral that is being checked."},"returns":{"_0":"A boolean value that indicates whether the vault is an enabled collateral for the account or not."}},"isControlCollateralInProgress()":{"returns":{"_0":"A boolean indicating whether control collateral is in progress."}},"isControllerEnabled(address,address)":{"details":"A controller is a vault that has been chosen for an account to have special control over account’s balances in the enabled collaterals vaults.","params":{"account":"The address of the account that is being checked.","vault":"The address of the controller that is being checked."},"returns":{"_0":"A boolean value that indicates whether the vault is enabled controller for the account or not."}},"isLockdownMode(bytes19)":{"params":{"addressPrefix":"The address prefix to check for lockdown mode status."},"returns":{"_0":"A boolean indicating whether lockdown mode is enabled."}},"isOperatorAuthenticated()":{"returns":{"_0":"A boolean indicating whether an operator is authenticated."}},"isPermitDisabledMode(bytes19)":{"params":{"addressPrefix":"The address prefix to check for permit functionality status."},"returns":{"_0":"A boolean indicating whether permit functionality is disabled."}},"isSimulationInProgress()":{"returns":{"_0":"A boolean indicating whether a simulation is in progress."}},"isVaultStatusCheckDeferred(address)":{"details":"This function reverts if the checks are in progress.","params":{"vault":"The address of the vault for which it is checked whether the status check is deferred."},"returns":{"_0":"A boolean flag that indicates whether the status check is deferred or not."}},"permit(address,address,uint256,uint256,uint256,uint256,bytes,bytes)":{"details":"Low-level call function is used to execute the arbitrary data signed by the owner or the operator on the EVC contract. During that call, EVC becomes msg.sender.","params":{"data":"The encoded data which is self-called on the EVC contract.","deadline":"The timestamp after which the permit is considered expired.","nonce":"The nonce for the given account and nonce namespace. A valid nonce value is considered to be the value currently stored and can take any value between 0 and type(uint256).max - 1.","nonceNamespace":"The nonce namespace for which the nonce is being used.","sender":"The address of the msg.sender which is expected to execute the data signed by the signer. If address(0) is passed, the msg.sender is ignored.","signature":"The signature of the data signed by the signer.","signer":"The address signing the permit message (ECDSA) or verifying the permit message signature (ERC-1271). It's also the owner or the operator of all the accounts for which authentication will be needed during the execution of the arbitrary data call.","value":"The amount of value to be forwarded with the call. If the value is type(uint256).max, the whole balance of the EVC contract will be forwarded."}},"reorderCollaterals(address,uint8,uint8)":{"details":"A collateral is a vault for which account’s balances are under the control of the currently enabled controller vault. Only the owner or an operator of the account can call this function. The order of collaterals can be changed by specifying the indices of the two collaterals to be swapped. Indices are zero-based and must be in the range of 0 to the number of collaterals minus 1. index1 must be lower than index2. Account status checks are performed.","params":{"account":"The address of the account for which the collaterals are being reordered.","index1":"The index of the first collateral to be swapped.","index2":"The index of the second collateral to be swapped."}},"requireAccountAndVaultStatusCheck(address)":{"details":"If checks deferred, the account and the vault are added to the respective sets of accounts and vaults to be checked at the end of the outermost checks-deferrable call. Account status check is performed by calling into selected controller vault and passing the array of currently enabled collaterals. If controller is not selected, the account is always considered valid. This function can only be called by the vault itself.","params":{"account":"The address of the account to be checked."}},"requireAccountStatusCheck(address)":{"details":"If checks deferred, the account is added to the set of accounts to be checked at the end of the outermost checks-deferrable call. There can be at most 10 unique accounts added to the set at a time. Account status check is performed by calling into the selected controller vault and passing the array of currently enabled collaterals. If controller is not selected, the account is always considered valid.","params":{"account":"The address of the account to be checked."}},"requireVaultStatusCheck()":{"details":"If checks deferred, the vault is added to the set of vaults to be checked at the end of the outermost checks-deferrable call. There can be at most 10 unique vaults added to the set at a time. This function can only be called by the vault itself."},"setAccountOperator(address,address,bool)":{"details":"Only the owner or authorized operator of the account can call this function. An operator is an address that can perform actions for an account on behalf of the owner. If it's an operator calling this function, it can only deauthorize itself.","params":{"account":"The address of the account whose operator is being set or unset.","authorized":"A boolean value that indicates whether the operator is being authorized or deauthorized. Reverts if the provided value is equal to the currently stored value.","operator":"The address of the operator that is being installed or uninstalled. Can neither be the EVC address nor an address belonging to the same owner as the account."}},"setLockdownMode(bytes19,bool)":{"details":"This function can only be called by the owner of the address prefix. To disable this mode, the EVC must be called directly. It is not possible to disable this mode by using checks-deferrable call or permit message.","params":{"addressPrefix":"The address prefix for which the lockdown mode is being set.","enabled":"A boolean indicating whether to enable or disable lockdown mode."}},"setNonce(bytes19,uint256,uint256)":{"details":"This function can only be called by the owner of the address prefix. Each nonce namespace provides a 256 bit nonce that has to be used sequentially. There's no requirement to use all the nonces for a given nonce namespace before moving to the next one which allows the use of permit messages in a non-sequential manner. To invalidate signed permit messages, set the nonce for a given nonce namespace accordingly. To invalidate all the permit messages for a given nonce namespace, set the nonce to type(uint).max.","params":{"addressPrefix":"The address prefix for which the nonce is being set.","nonce":"The new nonce for the given address prefix and nonce namespace.","nonceNamespace":"The nonce namespace for which the nonce is being set."}},"setOperator(bytes19,address,uint256)":{"details":"This function can only be called by the owner of the address prefix. Each bit in the bit field corresponds to one account belonging to the same owner. If the bit is set, the operator is authorized for the account.","params":{"addressPrefix":"The address prefix for which the bit field is being set.","operator":"The address of the operator for which the bit field is being set. Can neither be the EVC address nor an address belonging to the same address prefix.","operatorBitField":"The new bit field for the given address prefix and operator. Reverts if the provided value is equal to the currently stored value."}},"setPermitDisabledMode(bytes19,bool)":{"details":"This function can only be called by the owner of the address prefix. To disable this mode, the EVC must be called directly. It is not possible to disable this mode by using checks-deferrable call or (by definition) permit message. To support permit functionality by default, note that the logic was inverted here. To disable  the permit functionality, one must pass true as the second argument. To enable the permit functionality, one must pass false as the second argument.","params":{"addressPrefix":"The address prefix for which the permit functionality is being set.","enabled":"A boolean indicating whether to enable or disable the disable-permit mode."}}},"version":1},"userdoc":{"kind":"user","methods":{"areChecksDeferred()":{"notice":"Checks if checks are deferred."},"areChecksInProgress()":{"notice":"Checks if checks are in progress."},"batch((address,address,uint256,bytes)[])":{"notice":"Executes multiple calls into the target contracts while checks deferred as per batch items provided."},"batchRevert((address,address,uint256,bytes)[])":{"notice":"Executes multiple calls into the target contracts while checks deferred as per batch items provided."},"batchSimulation((address,address,uint256,bytes)[])":{"notice":"Executes multiple calls into the target contracts while checks deferred as per batch items provided."},"call(address,address,uint256,bytes)":{"notice":"Calls into a target contract as per data encoded."},"controlCollateral(address,address,uint256,bytes)":{"notice":"For a given account, calls into one of the enabled collateral vaults from the currently enabled controller vault as per data encoded."},"disableCollateral(address,address)":{"notice":"Disables a collateral for an account."},"disableController(address)":{"notice":"Disables a controller for an account."},"enableCollateral(address,address)":{"notice":"Enables a collateral for an account."},"enableController(address,address)":{"notice":"Enables a controller for an account."},"forgiveAccountStatusCheck(address)":{"notice":"Forgives previously deferred account status check."},"forgiveVaultStatusCheck()":{"notice":"Forgives previously deferred vault status check."},"getAccountOwner(address)":{"notice":"Returns the owner for the specified account."},"getAddressPrefix(address)":{"notice":"Returns the address prefix of the specified account."},"getCollaterals(address)":{"notice":"Returns an array of collaterals enabled for an account."},"getControllers(address)":{"notice":"Returns an array of enabled controllers for an account."},"getCurrentOnBehalfOfAccount(address)":{"notice":"Returns an account on behalf of which the operation is being executed at the moment and whether the controllerToCheck is an enabled controller for that account."},"getLastAccountStatusCheckTimestamp(address)":{"notice":"Retrieves the timestamp of the last successful account status check performed for a specific account."},"getNonce(bytes19,uint256)":{"notice":"Returns the current nonce for a given address prefix and nonce namespace."},"getOperator(bytes19,address)":{"notice":"Returns the bit field for a given address prefix and operator."},"getRawExecutionContext()":{"notice":"Returns current raw execution context."},"haveCommonOwner(address,address)":{"notice":"Checks whether the specified account and the other account have the same owner."},"isAccountOperatorAuthorized(address,address)":{"notice":"Returns whether a given operator has been authorized for a given account."},"isAccountStatusCheckDeferred(address)":{"notice":"Checks whether the status check is deferred for a given account."},"isCollateralEnabled(address,address)":{"notice":"Returns whether a collateral is enabled for an account."},"isControlCollateralInProgress()":{"notice":"Checks if control collateral is in progress."},"isControllerEnabled(address,address)":{"notice":"Returns whether a controller is enabled for an account."},"isLockdownMode(bytes19)":{"notice":"Checks if lockdown mode is enabled for a given address prefix."},"isOperatorAuthenticated()":{"notice":"Checks if an operator is authenticated."},"isPermitDisabledMode(bytes19)":{"notice":"Checks if permit functionality is disabled for a given address prefix."},"isSimulationInProgress()":{"notice":"Checks if a simulation is in progress."},"isVaultStatusCheckDeferred(address)":{"notice":"Checks whether the status check is deferred for a given vault."},"permit(address,address,uint256,uint256,uint256,uint256,bytes,bytes)":{"notice":"Executes signed arbitrary data by self-calling into the EVC."},"reorderCollaterals(address,uint8,uint8)":{"notice":"Swaps the position of two collaterals so that they appear switched in the array of collaterals for a given account obtained by calling getCollaterals function."},"requireAccountAndVaultStatusCheck(address)":{"notice":"Checks the status of an account and a vault and reverts if it is not valid."},"requireAccountStatusCheck(address)":{"notice":"Checks the status of an account and reverts if it is not valid."},"requireVaultStatusCheck()":{"notice":"Checks the status of a vault and reverts if it is not valid."},"setAccountOperator(address,address,bool)":{"notice":"Authorizes or deauthorizes an operator for the account."},"setLockdownMode(bytes19,bool)":{"notice":"Enables or disables lockdown mode for a given address prefix."},"setNonce(bytes19,uint256,uint256)":{"notice":"Sets the nonce for a given address prefix and nonce namespace."},"setOperator(bytes19,address,uint256)":{"notice":"Sets the bit field for a given address prefix and operator."},"setPermitDisabledMode(bytes19,bool)":{"notice":"Enables or disables permit functionality for a given address prefix."}},"version":1}},"settings":{"remappings":["@ensdomains/=lib/euler-swap/lib/v4-periphery/lib/v4-core/node_modules/@ensdomains/","@layerzerolabs/lz-evm-messagelib-v2/=lib/layerzero-v2/packages/layerzero-v2/evm/messagelib/","@layerzerolabs/lz-evm-oapp-v2/=lib/layerzero-v2/packages/layerzero-v2/evm/oapp/","@layerzerolabs/lz-evm-protocol-v2/=lib/layerzero-v2/packages/layerzero-v2/evm/protocol/","@layerzerolabs/oapp-evm-upgradeable/=lib/layerzero-devtools/packages/oapp-evm-upgradeable/","@layerzerolabs/oapp-evm/=lib/layerzero-devtools/packages/oapp-evm/","@layerzerolabs/oft-evm/=lib/layerzero-devtools/packages/oft-evm/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@pendle/core-v2/=lib/euler-price-oracle/lib/pendle-core-v2-public/contracts/","@pyth/=lib/euler-price-oracle/lib/pyth-sdk-solidity/","@redstone/evm-connector/=lib/euler-price-oracle/lib/redstone-oracles-monorepo/packages/evm-connector/contracts/","@solady/=lib/euler-price-oracle/lib/solady/src/","@uniswap/v3-core/=lib/euler-price-oracle/lib/v3-core/","@uniswap/v3-periphery/=lib/euler-price-oracle/lib/v3-periphery/","@uniswap/v4-core/=lib/euler-swap/lib/v4-periphery/lib/v4-core/","ds-test/=lib/fee-flow/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","ethereum-vault-connector/=lib/ethereum-vault-connector/src/","euler-earn/=lib/euler-earn/src/","euler-price-oracle-test/=lib/euler-price-oracle/test/","euler-price-oracle/=lib/euler-price-oracle/src/","euler-swap/=lib/euler-swap/","euler-vault-kit/=lib/euler-vault-kit/","evc/=lib/ethereum-vault-connector/src/","evk-test/=lib/euler-vault-kit/test/","evk/=lib/euler-vault-kit/src/","fee-flow/=lib/fee-flow/src/","forge-gas-snapshot/=lib/euler-vault-kit/lib/permit2/lib/forge-gas-snapshot/src/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts-upgradeable/lib/halmos-cheatcodes/src/","hardhat/=lib/euler-swap/lib/v4-periphery/lib/v4-core/node_modules/hardhat/","layerzero-devtools/=lib/layerzero-devtools/packages/toolbox-foundry/src/","layerzero-v2/=lib/layerzero-v2/","layerzero/oft-evm-upgradeable/=lib/layerzero-devtools/packages/oft-evm-upgradeable/contracts/","layerzero/oft-evm/=lib/layerzero-devtools/packages/oft-evm/contracts/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/","openzeppelin/=lib/ethereum-vault-connector/lib/openzeppelin-contracts/contracts/","pendle-core-v2-public/=lib/euler-price-oracle/lib/pendle-core-v2-public/contracts/","permit2/=lib/euler-vault-kit/lib/permit2/","pyth-sdk-solidity/=lib/euler-price-oracle/lib/pyth-sdk-solidity/","redstone-oracles-monorepo/=lib/euler-price-oracle/lib/","reward-streams/=lib/reward-streams/src/","solady/=lib/euler-price-oracle/lib/solady/src/","solidity-bytes-utils/=lib/solidity-bytes-utils/","solmate/=lib/fee-flow/lib/solmate/src/","v3-core/=lib/euler-price-oracle/lib/v3-core/contracts/","v3-periphery/=lib/euler-price-oracle/lib/v3-periphery/contracts/","v4-core/=lib/euler-swap/lib/v4-periphery/lib/v4-core/src/","v4-periphery/=lib/euler-swap/lib/v4-periphery/","lib/euler-earn:@openzeppelin-upgradeable/=lib/euler-earn/lib/openzeppelin-contracts-upgradeable/contracts/","lib/euler-earn:@openzeppelin/=lib/euler-earn/lib/openzeppelin-contracts/","lib/euler-earn:ethereum-vault-connector/=lib/euler-earn/lib/ethereum-vault-connector/src/","lib/euler-price-oracle:@openzeppelin/contracts/=lib/euler-price-oracle/lib/openzeppelin-contracts/contracts/","lib/euler-swap:solmate/=lib/euler-swap/lib/euler-vault-kit/lib/permit2/lib/solmate/","lib/fee-flow/src:solmate/=lib/fee-flow/lib/solmate/src/","lib/fee-flow/tokens:solmate/=lib/fee-flow/lib/solmate/tokens/","lib/fee-flow/utils:solmate/=lib/fee-flow/lib/solmate/utils/","lib/layerzero-devtools/packages/oapp-evm-upgradeable/contracts:@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","lib/layerzero-devtools/packages/oft-evm-upgradeable/contracts:@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","lib/layerzero-devtools/packages/oft-evm/contracts:@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts/contracts/"],"optimizer":{"enabled":true,"runs":20000},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/ethereum-vault-connector/src/interfaces/IEthereumVaultConnector.sol":"IEVC"},"evmVersion":"cancun","libraries":{}},"sources":{"lib/ethereum-vault-connector/src/interfaces/IEthereumVaultConnector.sol":{"keccak256":"0x2d7b4cf0a3346feada4b7bc2c661c89fa60a485f498f374078a934cd4ece7c7b","urls":["bzz-raw://e8c832fdc952913ffeec92cdbf06266b427c66d87ad1b5d027c73b22fc4fc82d","dweb:/ipfs/QmPEcrWAR85tMKBFQDnTZxgXPVENRU2B6MBgzgRBhbV8oP"],"license":"GPL-2.0-or-later"}},"version":1},"id":7}